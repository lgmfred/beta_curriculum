# Math Module Testing

```elixir
Mix.install([
  {:kino, "~> 0.7.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Setup

Ensure you type the `ea` keyboard shortcut to evaluate all Elixir cells before starting. Alternatively you can evaluate the Elixir cells as you read.

## Math Module Testing

Generally, we can split up our test suite into test cases. Each test case may require many assertions.

For this exercises, we're going to test a `Math` module that abstracts the operators for adding different data types together, like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(4, 4) # 
Math.add("a", "b") # "ab"
Math.add([1], [2]) # [1, 2]
```

Our **Happy-path** test cases (where our code is used as expected) could be the following.

`Math.add/2`

* add two integers
* add two strings
* add two lists

`Math.subtract/2`

* subtract two integers
* subtract two strings
* subtract two lists

We also want to consider **edge-case** test cases, also called **sad-path** or **unhappy path** when things go wrong, or the code is misused. For example, we might consider the following cases.

`Math.add/2`

* add a valid data type (integer, string, list) and an invalid data type.
* add two invalid data types.
* add two empty lists.
* add two empty strings.
* add a string by an empty string.
* add a list by an empty list.

`Math.subtract/2`

* subtract a valid data type (integer, string, list) and an invalid data type.
* subtract two invalid data types.
* subtract two empty lists.
* subtract two empty strings.
* subtract a string by an empty string.
* subtract a list by an empty list.

There can be a deceptive number of edge cases to consider. For example, we could build a growing list of edge-case permutations for each data type we want the `Math` module to handle.

Here, we've colored happy path tests green and edge-case tests yellow.

![](images/test%20cases.png)

By planning test cases, we can anticipate possible edge cases and ensure we understand the desired behavior of the feature.

Test and implement a `Math` module. Include at least two assertions for each happy path test case (**strings**, **lists**, and **integers**.)

```elixir
defmodule Math do
  def add(val1, val2) do
    case {val1, val2} do
      {val1, val2} when is_number(val2) and is_number(val2) -> {:ok, val1 + val2}
      {val1, val2} when is_binary(val1) and is_binary(val2) -> {:ok, val1 <> val2}
      {val1, val2} when is_list(val1) and is_list(val2) -> {:ok, val1 ++ val2}
      {val1, val2} when is_map(val1) and is_map(val2) -> {:ok, Map.merge(val1, val2)}
      _ -> {:error, :invalid_data}
    end
  end

  def subtract(val1, val2) do
    case {val1, val2} do
      {val1, val2} when is_number(val2) and is_number(val2) ->
        {:ok, val1 - val2}

      {val1, val2} when is_binary(val1) and is_binary(val2) ->
        char_list = String.to_charlist(val1) -- String.to_charlist(val2)
        {:ok, List.to_string(char_list)}

      {val1, val2} when is_list(val1) and is_list(val2) ->
        {:ok, val1 -- val2}

      {val1, val2} when is_map(val1) and is_map(val2) ->
        list_result = Map.to_list(val1) -- Map.to_list(val2)

        result =
          Enum.reduce(list_result, %{}, fn {key, val}, acc ->
            Map.put(acc, key, val)
          end)

        {:ok, result}

      _ ->
        {:error, :invalid_data}
    end
  end
end

ExUnit.start(autorun: false)

defmodule MathTest do
  use ExUnit.Case

  describe "add!/2" do
    test "with numbers" do
      assert Math.add(5, 7) == {:ok, 12}
      assert Math.add(3.7, 6.3) == {:ok, 10.0}
    end

    test "with strings" do
      assert Math.add("lgm", "fred") == {:ok, "lgmfred"}
      assert Math.add("ayiko ", "fred") == {:ok, "ayiko fred"}
    end

    test "with lists" do
      assert Math.add([1, :a, 5], [2, :b, 7]) == {:ok, [1, :a, 5, 2, :b, 7]}

      assert Math.add([1, one: "one"], [2, two: :two]) ==
               {:ok, [1, {:one, "one"}, 2, {:two, :two}]}
    end

    test "with maps" do
      assert Math.add(%{1 => "one"}, %{"ten" => 10}) == {:ok, %{1 => "one", "ten" => 10}}

      assert Math.add(%{"a" => :a, b: :b}, %{'c' => 'c'}) ==
               {:ok, %{:b => :b, 'c' => 'c', "a" => :a}}
    end
  end

  describe "subtract!/2" do
    test "with numbers" do
      assert Math.subtract(5, 7) == {:ok, -2}
      assert Math.subtract(10.9, 5.9) === {:ok, 5.0}
    end

    test "with strings" do
      assert Math.subtract("lgmfred", "fred") == {:ok, "lgm"}
      assert Math.subtract("ayikofred", "ayiko") == {:ok, "fred"}
    end

    test "with lists" do
      assert Math.subtract([1, :a, 5, :c], [:a, 2, :b, 5]) == {:ok, [1, :c]}
      assert Math.subtract([1, one: "one"], [1, one: "one"]) == {:ok, []}
    end

    test "with maps" do
      assert Math.subtract(%{1 => "one", "ten" => 10}, %{"ten" => 10}) == {:ok, %{1 => "one"}}

      assert Math.subtract(%{"a" => 1, "b" => 2, "c" => 3}, %{"b" => 2}) ==
               {:ok, %{"a" => 1, "c" => 3}}
    end
  end
end

ExUnit.run()
```

### Bonus: Edge Cases

Decide how to handle calling the `Math.add/2` and `Math.subtract/2` functions with invalid data.
For example, you might raise a [FunctionClauseError](https://hexdocs.pm/elixir/FunctionClauseError.html) using guards.

Note that if you expect to raise an error, it's usually idiomatic to name our functions using a bang `!` symbol, so `Math.add/2` and `Math.subtract/2` should be renamed to `Math.add!/2` and `Math.subtract!/2`.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add!(1, 1)
2

Math.add!(%{}, %{})
** (FunctionClauseError) no function clause matching in Math.add/2  
```

Alternatively or in addition, you might choose to change the return value to an `{:ok, value}` tuple or `{:error, error}` tuple.

<!-- livebook:{"force_markdown":true} -->

```elixir
Math.add(%{}, %{})
{:error, :invalid_data}
```

Test and implement these edge cases on your `Math` module above.

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-math_module_testing
$ git add .
$ git commit -m "finish math module testing exercise"
$ git push origin exercise-math_module_testing
```

Create a pull request to your forked `main` branch. Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                           | Next                                                   |
| ---------------------------------- | -----------------------------------------------------: |
| [ExUnit](../reading/exunit.livemd) | [Product Filters](../exercises/product_filters.livemd) |
