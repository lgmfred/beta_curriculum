# Deployment

```elixir
Mix.install([
  {:kino, "~> 0.7.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new)

## Deploy

Use [Fly.io](https://fly.io/) to deploy your `Blog` or capstone project.

<div style="background-color: lightcoral; font-weight: bold; padding: 1rem; color: black; margin: 1rem 0;">
At the time of writing, Fly.io allows you to have two free apps. If you choose to deploy your Blog project, then you may have to pay a fee to deploy your capstone project.
</div>

<!-- livebook:{"break_markdown":true} -->

### Setup Continuous Integration

Use GitHub Actions to setup a CI system that will automatically run tests whenever you make a PR to the `Blog` project.

<!-- livebook:{"break_markdown":true} -->

### Setup Continuous Deployment System

Use GitHub Actions to setup a CD system with Fly.io that will automatically deploy your project whenever you merge a PR to the `main` branch.

<!-- livebook:{"break_markdown":true} -->

### Bonus: Production Seeds

Create a module that will seed your production database with data. Open the IEx shell in your production application and use the module to seed your production database.

<!-- livebook:{"break_markdown":true} -->

### Bonus: CI Check

Add the following steps to your CI process.

Code formatting:

```
Run mix format --check-formatted
```

Check warnings as errors:

```
mix compile --warnings-as-errors
```

<!-- livebook:{"break_markdown":true} -->

### Bonus: Credo CI

Add [Credo](../reading/credo.livemd) to your project and configure it with your continuous integration system.

<!-- livebook:{"break_markdown":true} -->

### Bonus: Dialyzer CI

Add [Dialyzer](../reading/typespecs.livemd) to your project and configure it with your continuous integration system.

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-deployment
$ git add .
$ git commit -m "finish deployment exercise"
$ git push origin exercise-deployment
```

Create a pull request to your forked `main` branch. Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                                           | Next                                   |
| ------------------------------------------------------------------ | -------------------------------------: |
| [Book Search Deployment](../reading/book_search_deployment.livemd) | [LiveView](../reading/liveview.livemd) |
