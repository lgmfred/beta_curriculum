# Custom Enum With Reduce

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Custom Enum With Reduce

Reduce is an incredibly powerful tool you can leverage in a wide variety of circumstances.

If you'd like to learn more about reduce, there's an [excellent video](https://github.com/paulfioravanti/presentations/tree/master/everything_is_reduce) by Paul Fioravanti.

<!-- livebook:{"attrs":{"source":"YouTube.new(\"https://www.youtube.com/watch?v=OQrfedclHfk\")","title":"Everything Is Reduce"},"kind":"Elixir.HiddenCell","livebook_object":"smart_cell"} -->

```elixir
YouTube.new("https://www.youtube.com/watch?v=OQrfedclHfk")
```

We're going to use `Reduce` to re-implement several of the [Enum](https://hexdocs.pm/elixir/Enum.html) module's functions to show how it can be leveraged for many problems. We will only worry about implementing these functions for **lists**.

You may also use [Enum.reverse/1](https://hexdocs.pm/elixir/Enum.html#reverse/1) if necessary.

Implement the `CustomEnum` module according to the documentation below.

<details style="background-color: lightgreen; padding: 1rem;">
<summary>Possible Solution</summary>

```elixir
defmodule CustomEnum do
  def map(list, callback_function) do
    Enum.reduce(list, [], fn each, acc ->
      [callback_function.(each) | acc]
    end)
    |> Enum.reverse()
  end

  def filter(list, callback_function) do
    Enum.reduce(list, [], fn each, acc ->
      if callback_function.(each) do
        [each | acc]
      else
        acc
      end
    end)
    |> Enum.reverse()
  end

  def sum(list) do
    Enum.reduce(list, 0, fn each, acc -> acc + each end)
  end

  def join(list_of_strings) do
    Enum.reduce(list_of_strings, "", fn str, acc -> acc <> str end)
  end

end
```

</details>

```elixir
defmodule CustomEnum do
  @moduledoc """
  Documentation for `CustomEnum`.
  Re-implement common [Enum](https://hexdocs.pm/elixir/Enum.html) functions using [Enum.reduce/2](https://hexdocs.pm/elixir/Enum.html#reduce/2) or [Enum.reduce/3](https://hexdocs.pm/elixir/Enum.html#reduce/3).
  """

  @doc """
  Map over a list
  
  ## Examples
  
    iex> CustomEnum.map([1, 2, 3], fn integer -> integer * 2 end)
    [2, 4, 6]
  
    iex> CustomEnum.map([5, 4, 3], fn integer -> is_integer(integer) end)
    [true, true, true]
  """
  def map(list, callback_function) do
  end

  @doc """
  Filter elements in a list. Keep elements that return `true` when called with the
  provided callback function.
  
  ## Examples
  
    iex> CustomEnum.filter([1, 2, "3"], fn int -> is_integer(int) end)
    [1, 2]
  
    iex> CustomEnum.filter([1, "2", "3"], fn char -> is_bitstring(char) end)
    ["2", "3"]
  """
  def filter(list, callback_function) do
  end

  @doc """
  Sum a list of integers.
  
  ## Examples
  
    iex> CustomEnum.sum([1, 2, 3])
    6
  
    iex> CustomEnum.sum([1, 1, 1])
    3
  """
  def sum(list_of_integers) do
  end

  @doc """
  Join a list of strings together.
  
  ## Examples
  
    iex> CustomEnum.join(["A", "B", "C"])
    "ABC"
  
    iex> CustomEnum.join(["Hello", ",", " ", "World", "!"])
    "Hello, World!"
  """
  def join(list_of_strings) do
  end
end
```

<!-- livebook:{"attrs":{"assertions":"list = Enum.to_list(1..10)\n\nassert CustomEnum.map(list, & &1), \"Implement the `map/2` function.\"\nassert is_list(CustomEnum.map(list, & &1)), \"`map/2` should return a list.\"\n\nassert CustomEnum.map([1, 2, 3], &(&1 * 2)) == [2, 4, 6]\n\nassert CustomEnum.each(list, & &1), \"Implement the `each/2` function.\"\nassert CustomEnum.each(list, & &1) == :ok, \"`each/2` should return :ok.\"\n\nassert CustomEnum.filter(list, & &1), \"Implement the `filter/2` function.\"\nassert is_list(CustomEnum.filter(list, & &1)), \"`each/2` should return a list.\"\n\nassert CustomEnum.filter(list, &(&1 < 5)) == Enum.filter(list, &(&1 < 5))\n\nassert CustomEnum.sum(list), \"Implement the `sum/1` function.\"\nassert is_integer(CustomEnum.sum(list)), \"`sum/1` should return an integer.\"\n\nassert CustomEnum.sum(list) == Enum.sum(list)","attempts":0,"code":"","solution":"defmodule CustomEnum do\n  def map(collection, function) do\n    Enum.reduce(collection, [], fn each, acc ->\n      [function.(each) | acc]\n    end)\n    |> Enum.reverse()\n  end\n\n  def each(collection, function) do\n    Enum.reduce(collection, fn each, _acc ->\n      function.(each)\n      :ok\n    end)\n  end\n\n  def filter(collection, function) do\n    Enum.reduce(collection, [], fn each, acc ->\n      if function.(each) do\n        [each | acc]\n      else\n        acc\n      end\n    end)\n    |> Enum.reverse()\n  end\n\n  def sum(collection) do\n    Enum.reduce(collection, 0, fn each, acc -> acc + each end)\n  end\nend","title":"Exercise"},"kind":"Elixir.TestedCell","livebook_object":"smart_cell"} -->

```elixir
ExUnit.start(auto_run: false)

defmodule Assertion do
  use ExUnit.Case

  test "Exercise" do
    try do
      Process.flag(:trap_exit, true)

      list = Enum.to_list(1..10)

      assert CustomEnum.map(list, & &1), "Implement the `map/2` function."
      assert is_list(CustomEnum.map(list, & &1)), "`map/2` should return a list."

      assert CustomEnum.map([1, 2, 3], &(&1 * 2)) == [2, 4, 6]

      assert CustomEnum.each(list, & &1), "Implement the `each/2` function."
      assert CustomEnum.each(list, & &1) == :ok, "`each/2` should return :ok."

      assert CustomEnum.filter(list, & &1), "Implement the `filter/2` function."
      assert is_list(CustomEnum.filter(list, & &1)), "`each/2` should return a list."

      assert CustomEnum.filter(list, &(&1 < 5)) == Enum.filter(list, &(&1 < 5))

      assert CustomEnum.sum(list), "Implement the `sum/1` function."
      assert is_integer(CustomEnum.sum(list)), "`sum/1` should return an integer."

      assert CustomEnum.sum(list) == Enum.sum(list)
    catch
      error ->
        flunk("""
          Your solution threw the following error:

          #{inspect(error)}
        """)

      :exit, {error, {GenServer, message_type, [_pid, message, _timeout]}} ->
        flunk("""
            GenServer crashed with the following error:

            #{inspect(error)}

            When it received: #{inspect(message)} #{message_type}

            Likely you need to define the corresponding handler for #{inspect(message)}.

            Ensure you defined a handle_call/3, handle_info/2, or handle_cast/2 or appropriate handler function.

              def handle_call(:message, _from, state) do
                ...
              end

            Also ensure you call GenServer.call/2, GenServer.cast/2, or otherwise send the message correctly.

              GenServer.call(pid, :message)
        """)

      :exit, error ->
        flunk("""
          Unhandled exit with the following error:

          #{inspect(error)}
        """)
    after
      # all warnings and errors are printed to the previous Kino Frame
      # to avoid cluttering the test results display.
      Process.sleep(10)
      Kino.render(Kino.Markdown.new("### Test Results
<hr/>"))
    end
  end
end

ExUnit.run()

# Make variables and modules defined in the test available.
# Also allows for exploration using the output of the cell.
# Unfortunately, this results in duplication of warnings.
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish custom enum with reduce exercise"
```

## Up Next

| Previous                                               | Next                                   |
| ------------------------------------------------------ | -------------------------------------: |
| [Weighted Voting](../exercises/weighted_voting.livemd) | [Datetime](../reading/datetime.livemd) |
