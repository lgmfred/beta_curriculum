# File System Todo

```elixir
Mix.install([
  {:kino, "~> 0.7.0", override: true},
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Overview

You're going to create a TodoList application with persistence using a file system.

<details style="background-color: lightgreen; padding: 1rem; margin: 1rem 0;">
<summary>Example Solution</summary>

```elixir
defmodule TodoList do
  @storage "todolist"

  def list do
    case File.read(@storage) do
      {:ok, list} -> :erlang.binary_to_term(list)
      # other operations will create the storage if it does not yet exist.
      _ -> []
    end
  end

  def add(item) do
    new_list = [item | list()]
    File.write(@storage, :erlang.term_to_binary(new_list))
  end

  def complete(item) do
    new_list = list() -- [item]
    File.write(@storage, :erlang.term_to_binary(new_list))
  end
end
```

</details>

Implement the `TodoList` module as documented. You may choose any file for your persistence mechanism.

```elixir
defmodule TodoList do
  @moduledoc """
  Documentation for `TodoList`
  """
  @storage "todolist"

  @doc """
  Retrieve the persistent todo list.

  ## Examples

      iex> TodoList.list()
      []
  """
  def list do
  end

  @doc """
  Add an item to our persistent todo list.

  ## Examples

      iex> TodoList.add("finish homework")
      iex> TodoList.list()
      ["finish homework"]
      
      iex> TodoList.add("task 1")
      iex> TodoList.add("task 2")
      iex> TodoList.list()
      ["task 2", "task 1"]
  """
  def add(item) do
  end

  @doc """
  Complete (remove) and item from the persistent todo list.

  ## Examples

      iex> TodoList.add("finish homework")
      iex> TodoList.complete("finish homework")
      iex> TodoList.list()
      []
  """
  def complete(item) do
  end
end
```

## Commit Your Progress

Run the following in your command line from the curriculum folder to track and save your progress in a Git commit.
Ensure that you do not already have undesired or unrelated changes by running `git status` or by checking the source control tab in Visual Studio Code.

```
$ git checkout main
$ git checkout -b exercise-file_system_todo_app
$ git add .
$ git commit -m "finish file system todo app exercise"
$ git push origin exercise-file_system_todo_app
```

Create a pull request to your forked `main` branch. Please do not create a pull request to the DockYard Academy repository as this will spam our PR tracker.

**DockYard Academy Students Only:**

Notify your teacher by including `@BrooklinJazz` in your PR description to get feedback.

If you are interested in joining the next academy cohort, [sign up here](https://academy.dockyard.com/) to receive more news when it is available.

## Up Next

| Previous                                   | Next                                                 |
| ------------------------------------------ | ---------------------------------------------------: |
| [Save Game](../exercises/save_game.livemd) | [Document Tools](../exercises/document_tools.livemd) |
