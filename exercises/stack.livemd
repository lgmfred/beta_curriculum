# Stack

```elixir
Mix.install([
  {:youtube, github: "brooklinjazz/youtube"},
  {:hidden_cell, github: "brooklinjazz/hidden_cell"},
  {:tested_cell, github: "brooklinjazz/tested_cell"},
  {:utils, path: "#{__DIR__}/../utils"}
])
```

## Navigation

[Return Home](../start.livemd)<span style="padding: 0 30px"></span>
[Report An Issue](https://github.com/DockYard-Academy/beta_curriculum/issues/new?assignees=&labels=&template=issue.md&title=)

## Stack

Test and implement a `Stack` process.

The `Stack` process should store a list as state and `push/2` elements onto the stack, and `pop/2` elements
off of the stack like so.

<!-- livebook:{"force_markdown":true} -->

```elixir
{:ok, pid} = Stack.start_link([])
[:one] = Stack.push(pid, :one)
[:two, :one] = Stack.push(pid, :two)
:two = Stack.pop(pid)
:one = Stack.pop(pid)
# return no value when the stack is empty
nil = Stack.pop(pid)
```

Implement and test the `Stack` module. Ensure you have at least one test each for the `push/2` function
and the `pop/1` function.

```elixir
defmodule Stack do
  use GenServer
end

defmodule StackTests do
  use ExUnit.Case
end
```

## Commit Your Progress

Run the following in your command line from the beta_curriculum folder to track and save your progress in a Git commit.

```
$ git add .
$ git commit -m "finish stack exercise"
```

## Up Next

| Previous                                                                                 | Next                                                   |
| ---------------------------------------------------------------------------------------- | -----------------------------------------------------: |
| [Documentation And Static Analysis](../reading/documentation_and_static_analysis.livemd) | [Product Filters](../exercises/product_filters.livemd) |
